<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
  <title>Google Analytics (<%= settings.frequency.capitalize %>)</title>

  <style type="text/css">
    body {
      background: #fff;
      color: #000;
      width: 384px;
      padding: 0;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 360px;
      height: 180px;
    }
    .line-0,
    .line-1 {
      fill: none;
      stroke: #999;
      stroke-width: 3px;
    }
    .line-1 {
      stroke: #000;
    }

  </style>

  <%= erb(:js_d3, :layout => false) %>

  <script>
    window.onload = function() {
      // Overall width/height available.
      var outer_width = 360;
      var outer_height = 180;

      // Area around the actual chart (space for axes numbers etc).
      var margin = {top: 0, right: 0, bottom: 0, left: 0};

      // Area of the chart itself (not including space for axes numbers).
      var inner_width = outer_width - margin.left - margin.right;
      var inner_height = outer_height - margin.top - margin.bottom;

      <% if settings.frequency == 'daily' %>
        var parseDate = d3.time.format("%Y%m%d %H%M").parse;
      <% else %>
        var parseDate = d3.time.format("%Y%m%d").parse;
      <% end %>

      // The scales.
      var x = d3.time.scale()
          .range([0, inner_width]);

      var y = d3.scale.linear()
          .range([inner_height, 0]);

      var line = d3.svg.line()
          .x(function(d) { return x(d.date); })
          .y(function(d) { return y(d.visits); });

      // Draw a single chart for a Profile.
      // See the block after this function for what chart_data looks like.
      var draw_chart = function(chart_data) {
        // Create the main chart area.
        var svg = d3.select('#chart-'+chart_data.number).append('svg')
            .attr('width', outer_width)
            .attr('height', outer_height)
          .append('g')
            .attr('transform',
                            'translate(' + margin.left + ',' + margin.top + ')');

        // Draw each line.
        // In reverse order, because we need to draw the oldest Period first.
        // So line_idx = 0 is the oldest Period.
        // line_idx = 1 is yesterday/last week.
        chart_data.lines.reverse().forEach(function(line_data, line_idx) {
          line_data.forEach(function(d) {
            d.date = parseDate(d.date);
            d.visits = +d.visits;
          });

          x.domain(d3.extent(line_data, function(d) { return d.date; }));
          y.domain(d3.extent(line_data, function(d) { return d.visits; }));

          svg.append('path')
            .datum(line_data)
            .attr('class', 'line-'+line_idx)
            .attr('d', line);

        });
      };

      <%# We generate a chart for each Profile: %>
      <% @profiles_data.each_with_index do |p, profile_idx| %>
        var chart_data = {
          // Will be 0-based number of this chart on the page:
          number: <%= profile_idx %>,
          // Will be an array of hashes, each hash having 'date' and 'visits'
          // keys:
          lines: []
        };

        <%# For each Period (eg, yesterday, last week), we draw a line: %>
        <% p[:periods].each_with_index do |period, period_idx| %>
          chart_data.lines.push([]);

          <%# For each Visit in a Period, we add a point on the line: %>
          <% period[:visits].each do |v| %>
            chart_data.lines[<%= period_idx %>].push({
              date: "<%= v.date %><% if settings.frequency == 'daily' %> <%= v.hour %>00<% end %>",
              visits: <%= v.visits %>
            });
          <% end %>
        <% end %>

        draw_chart(chart_data);
      <% end %>
    };

  </script>

</head>
<body>
  <h1>Google Analytics (<%= settings.frequency.capitalize %>)</h1>

  <% @profiles_data.each_with_index do |p, idx| %>
    <h2><%= p[:name] %></h2>

    <% if p[:periods][0][:start_date] == p[:periods][0][:end_date] %>
      <p>For <%= p[:periods][0][:start_date] %>.</p>
    <% else %>
      <p>From <%= p[:periods][0][:start_date] %> to <%= p[:periods][0][:end_date] %>.</p>
    <% end %>

    <h3>Visits</h3>

    <div id="chart-<%= idx %>" class="chart"></div>

<% 
=begin %>
    <h4><% if settings.frequency == 'weekly' %>Last week<% else %>Yesterday<% end %></h4>
    <ul>
      <% p[:periods][0][:visits].each do |v| %>
        <li><%= v.date %><% if settings.frequency == 'daily' %> <%= v.hour %>:00<% end %> – <%= v.visits %></li>
      <% end %> 
    </ul>

    <h4>Previous</h4>
    <ul>
      <% p[:periods][1][:visits].each do |v| %>
        <li><%= v.date %><% if settings.frequency == 'daily' %> <%= v.hour %>:00<% end %> – <%= v.visits %></li>
      <% end %> 
    </ul>
<% 
=end %>

    <h3>Totals</h2>
    <p>Visits: 
      <% if p[:periods][0][:total_visits] > p[:periods][1][:total_visits] %>
      ^
      <% elsif p[:periods][0][:total_visits] < p[:periods][1][:total_visits] %>
      v
      <% else %>
      –
      <% end %>
      <%= p[:periods][0][:total_visits] %> (<%= p[:periods][1][:total_visits] %>)</p>
    <p>Visitors: 
      <% if p[:periods][0][:total_visitors] > p[:periods][1][:total_visitors] %>
      ^
      <% elsif p[:periods][0][:total_visitors] < p[:periods][1][:total_visitors] %>
      v
      <% else %>
      –
      <% end %>
      <%= p[:periods][0][:total_visitors] %> (<%= p[:periods][1][:total_visitors] %>)</p>
    <p>Pageviews:
      <% if p[:periods][0][:total_pageviews] > p[:periods][1][:total_pageviews] %>
      ^
      <% elsif p[:periods][0][:total_pageviews] < p[:periods][1][:total_pageviews] %>
      v
      <% else %>
      –
      <% end %>
      <%= p[:periods][0][:total_pageviews] %> (<%= p[:periods][1][:total_pageviews] %>)</p>
  <% end %>



</body>
</html>
